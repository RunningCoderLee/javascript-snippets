{
  "ConsoleAssert": {
    "prefix": "ca",
    "body": "console.assert(${1:condition}, ${2:message})",
    "description": "Writes an error message to the console if the assertion is false. If the assertion is true, nothing happens."
  },
  "ConsoleClear": {
    "prefix": "ccl",
    "body": "console.clear()",
    "description": "Clears the console."
  },
  "ConsoleCount": {
    "prefix": "cc",
    "body": "console.count(${1:label})",
    "description": "Logs the number of times that this particular call to count() has been called. This function takes an optional argument label."
  },
  "ConsoleCountReset": {
    "prefix": "ccr",
    "body": "console.countReset(${1:label})",
    "description": "Resets the counter. This function takes an optional argument label."
  },
  "ConsoleDebug": {
    "prefix": "cdb",
    "body": "console.debug(${1:message})",
    "description": "The Console method debug() outputs a message to the web console at the \"debug\" log level. The message is only displayed to the user if the console is configured to display debug output."
  },
  "ConsoleDir": {
    "prefix": "cd",
    "body": "console.dir(${1:value})",
    "description": "The Console method dir() displays an interactive list of the properties of the specified JavaScript object. The output is presented as a hierarchical listing with disclosure triangles that let you see the contents of child objects."
  },
  "ConsoleDirXML": {
    "prefix": "cdx",
    "body": "console.dirxml(${1:object})",
    "description": "Displays an interactive tree of the descendant elements of the specified XML/HTML element. If it is not possible to display as an element the JavaScript Object view is shown instead. The output is presented as a hierarchical listing of expandable nodes that let you see the contents of child nodes."
  },
  "ConsoleError": {
    "prefix": "ce",
    "body": "console.error(${1:message})",
    "description": "Outputs an error message to the Web Console."
  },
  "ConsoleGroup": {
    "prefix": "cg",
    "body": "console.group(${1:groupTitle})",
    "description": "Creates a new inline group in the Web Console log. This indents following console messages by an additional level, until console.groupEnd() is called."
  },
  "ConsoleGroupCollapsed": {
    "prefix": "cgc",
    "body": "console.groupCollapsed(${1:groupTitle})",
    "description": "Creates a new inline group in the Web Console. Unlike console.group(), however, the new group is created collapsed. The user will need to use the disclosure button next to it to expand it, revealing the entries created in the group."
  },
  "ConsoleGroupEnd": {
    "prefix": "cge",
    "body": "console.groupEnd()",
    "description": "Exits the current inline group in the Web Console. See Using groups in the console in the console documentation for details and examples."
  },
  "ConsoleInfo": {
    "prefix": "ci",
    "body": "console.info(${1:message})",
    "description": "Outputs an informational message to the Web Console. In Firefox and Chrome, a small \"i\" icon is displayed next to these items in the Web Console's log."
  },
  "ConsoleLog": {
    "prefix": "cl",
    "body": "console.log(${1:message})",
    "description": "The Console method log() outputs a message to the web console. The message may be a single string (with optional substitution values), or it may be any one or more JavaScript objects."
  },
  "ConsoleTable": {
    "prefix": "ctb",
    "body": "console.table(${1:tabularData})",
    "description": "Displays tabular data as a table."
  },
  "ConsoleTime": {
    "prefix": "ct",
    "body": "console.time(${1:label})",
    "description": "Starts a timer you can use to track how long an operation takes. You give each timer a unique name, and may have up to 10,000 timers running on a given page. When you call console.timeEnd() with the same name, the browser will output the time, in milliseconds, that elapsed since the timer was started."
  },
  "ConsoleTimeEnd": {
    "prefix": "cte",
    "body": "console.timeEnd(${1:label})",
    "description": "Stops a timer that was previously started by calling \"console.time()\"."
  },
  "ConsoleTrace": {
    "prefix": "ctr",
    "body": "console.trace(${1:message})",
    "description": "The console interface's trace() method outputs a stack trace to the Web Console."
  },
  "ConsoleWarn": {
    "prefix": "cw",
    "body": "console.warn(${1:message})",
    "description": "Outputs a warning message to the Web Console."
  },
  "Concat": {
    "prefix": ".concat",
    "body": ".concat(${1:items})",
    "description": "The \"arrayInstance.concat()\" method s used to merge two or more arrays. This method does not change the existing arrays, but instead returns a new array.\n\nThe \"stringInstance.concat()\" method concatenates the string arguments to the calling string and returns a new string."
  },
  "Includes": {
    "prefix": ".includes",
    "body": ".includes(${3:searchElement}${1:, ${2:fromIndex}})",
    "description": "The \"arrayInstance.includes()\" method determines whether an array includes a certain value among its entries, returning true or false as appropriate.\n\nThe \"stringInstance.includes()\" method determines whether one string may be found within another string, returning true or false as appropriate."
  },
  "IndexOf": {
    "prefix": ".indexOf",
    "body": ".indexOf(${3:searchElement}${1:, ${2:fromIndex}})",
    "description": "The \"arrayInstance.indexOf()\" method returns the first index at which a given element can be found in the array, or -1 if it is not present.\n\nThe \"stringInstance.indexOf()\" method returns the index within the calling String object of the first occurrence of the specified value, starting the search at fromIndex. Returns -1 if the value is not found."
  },
  "LastIndexOf": {
    "prefix": ".lastIndexOf",
    "body": ".lastIndexOf(${3:searchElement}${1:, ${2:fromIndex}})",
    "description": "The \"arrayInstance.lastIndexOf()\" method returns the last index at which a given element can be found in the array, or -1 if it is not present. The array is searched backwards, starting at fromIndex.\n\nThe \"stringInstance.lastIndexOf()\" method returns the index within the calling String object of the last occurrence of the specified value, searching backwards from fromIndex. Returns -1 if the value is not found."
  },
  "Slice": {
    "prefix": ".slice",
    "body": ".slice(${1:${2:start}${3:, ${0:end}}})",
    "description": "The \"arrayInstance.slice()\" method returns a shallow copy of a portion of an array into a new array object selected from begin to end (end not included) where begin and end represent the index of items in that array. The original array will not be modified.\n\nThe \"stringInstance.slice()\" method extracts a section of a string and returns it as a new string, without modifying the original string."
  },
  "ValueOf": {
    "prefix": ".valueOf",
    "body": ".valueOf()",
    "description": "The \"arrayInstance.valueOf()\" method returns the primitive value of the specified object.\n\nThe \"stringInstance.valueOf()\" method returns the primitive value of a String object.\n\nThe \"numberInstance.valueOf()\" method returns the wrapped primitive value of a Number object."
  },
  "ArrayFrom": {
    "prefix": "Af",
    "body": "Array.from(${1:arrayLike}${2:, ${0:mapFn}})",
    "description": "The \"Array.from()\" method creates a new, shallow-copied Array instance from an array-like or iterable object."
  },
  "ArrayIsArray": {
    "prefix": "Aia",
    "body": "Array.isArray(${1:value})",
    "description": "The \"Array.isArray()\" method determines whether the passed value is an Array."
  },
  "ArrayOf": {
    "prefix": "Ao",
    "body": "Array.of(${1:items})",
    "description": "The \"Array.of()\" method creates a new Array instance from a variable number of arguments, regardless of number or type of the arguments."
  },
  "ArrayCopyWithin": {
    "prefix": ".copyWithin",
    "body": ".copyWithin(${1:target}${2:, ${3:start}${4:, ${0:end}}})",
    "description": "The \"copyWithin()\" method shallow copies part of an array to another location in the same array and returns it without modifying its length."
  },
  "ArrayEntries": {
    "prefix": ".entries",
    "body": ".entries()",
    "description": "The \"entries()\" method returns a new Array Iterator object that contains the key/value pairs for each index in the array."
  },
  "ArrayEvery": {
    "prefix": ".every",
    "body": ".every(${1:(${2:value}${3:, ${4:index}${5:, ${6:array}}}) => {$0\\}})",
    "description": "The \"every()\" method tests whether all elements in the array pass the test implemented by the provided function. It returns a Boolean value."
  },
  "ArrayFill": {
    "prefix": ".fill",
    "body": ".fill(${1:target}${2:, ${3:start}${4:, ${0:end}}})",
    "description": "The \"fill()\" method fills (modifies) all the elements of an array from a start index (default zero) to an end index (default array length) with a static value. It returns the modified array."
  },
  "ArrayFilter": {
    "prefix": ".filter",
    "body": ".filter(${1:(${2:value}${3:, ${4:index}${5:, ${6:array}}}) => {$0\\}})",
    "description": "The \"filter()\" method creates a new array with all elements that pass the test implemented by the provided function."
  },
  "ArrayFind": {
    "prefix": ".find",
    "body": ".find(${1:(${2:value}${3:, ${4:index}${5:, ${6:array}}}) => {$0\\}})",
    "description": "The \"find()\" method returns the value of the first element in the array that satisfies the provided testing function. Otherwise \"undefined\" is returned."
  },
  "ArrayFindIndex": {
    "prefix": ".findIndex",
    "body": ".findIndex(${1:(${2:value}${3:, ${4:index}${5:, ${6:array}}}) => {$0\\}})",
    "description": "The \"findIndex()\" method returns the index of the first element in the array that satisfies the provided testing function. Otherwise, it returns -1, indicating that no element passed the test."
  },
  "ArrayFlat": {
    "prefix": ".flat",
    "body": ".flat(${1:depth})",
    "description": "The \"flat()\" method creates a new array with all sub-array elements concatenated into it recursively up to the specified depth."
  },
  "ArrayFlatMap": {
    "prefix": ".flatMap",
    "body": ".flatMap(${1:(${2:value}${3:, ${4:index}${5:, ${6:array}}}) => {$0\\}})",
    "description": "The \"flatMap()\" method first maps each element using a mapping function, then flattens the result into a new array. It is identical to a map() followed by a flat() of depth 1, but flatMap() is often quite useful, as merging both into one method is slightly more efficient."
  },
  "ArrayForEach": {
    "prefix": ".forEach",
    "body": ".forEach(${1:(${2:value}${3:, ${4:index}${5:, ${6:array}}}) => {$0\\}})",
    "description": "The \"forEach()\" method executes a provided function once for each array element."
  },
  "ArrayJoin": {
    "prefix": ".join",
    "body": ".join(${1:separator})",
    "description": "The \"join()\" method creates and returns a new string by concatenating all of the elements in an array (or an array-like object), separated by commas or a specified separator string. If the array has only one item, then that item will be returned without using the separator."
  },
  "ArrayKeys": {
    "prefix": ".keys",
    "body": ".keys()",
    "description": "The \"keys()\" method returns a new Array Iterator object that contains the keys for each index in the array."
  },
  "ArrayMap": {
    "prefix": ".map",
    "body": ".map(${1:(${2:value}${3:, ${4:index}${5:, ${6:array}}}) => {$0\\}})",
    "description": "The \"map()\" method creates a new array with the results of calling a provided function on every element in the calling array."
  },
  "ArrayPop": {
    "prefix": ".pop",
    "body": ".pop()",
    "description": "The \"pop()\" method removes the last element from an array and returns that element. This method changes the length of the array."
  },
  "ArrayPush": {
    "prefix": ".push",
    "body": ".push(${1:value})",
    "description": "The \"push()\" method removes the last element from an array and returns that element. This method changes the length of the array."
  },
  "ArrayReduce": {
    "prefix": ".reduce",
    "body": ".reduce(${3:(${4:previousValue}${5:, ${6:currentValue}${7:, ${8:currentIndex}${9:, ${10:array}}}}) => {$0\\}}${1:, ${2:initialValue}})",
    "description": "The \"reduce()\" method executes a reducer function (that you provide) on each element of the array, resulting in a single output value."
  },
  "ArrayReduceRight": {
    "prefix": ".reduceRight",
    "body": ".reduceRight(${3:(${4:previousValue}${5:, ${6:currentValue}${7:, ${8:currentIndex}${9:, ${10:array}}}}) => {$0\\}}${1:, ${2:initialValue}})",
    "description": "The \"reduceRight()\" method applies a function against an accumulator and each value of the array (from right-to-left) to reduce it to a single value."
  },
  "ArrayReverse": {
    "prefix": ".reverse",
    "body": ".reverse()",
    "description": "The \"reverse()\" method reverses an array in place. The first array element becomes the last, and the last array element becomes the first."
  },
  "ArrayShift": {
    "prefix": ".shift",
    "body": ".shift()",
    "description": "The \"shift()\" method removes the first element from an array and returns that removed element. This method changes the length of the array."
  },
  "ArraySome": {
    "prefix": ".some",
    "body": ".some(${1:(${2:value}${3:, ${4:index}${5:, ${6:array}}}) => {$0\\}})",
    "description": "The \"some()\" method tests whether at least one element in the array passes the test implemented by the provided function. It returns a Boolean value."
  },
  "ArraySort": {
    "prefix": ".sort",
    "body": ".sort(${1:(${2:a}, ${3:b}) => {$0\\}})",
    "description": "The \"sort()\" method sorts the elements of an array in place and returns the sorted array. The default sort order is built upon converting the elements into strings, then comparing their sequences of UTF-16 code units values."
  },
  "ArrayUnshift": {
    "prefix": ".unshift",
    "body": ".unshift(${0:value})",
    "description": "The \"unshift()\" method adds one or more elements to the beginning of an array and returns the new length of the array."
  },
  "ArrayValues": {
    "prefix": ".values",
    "body": ".values()",
    "description": "The \"values()\" method returns a new Array Iterator object that contains the values for each index in the array."
  },
  "ObjectAssign": {
    "prefix": "Oa",
    "body": "Object.assign(${1:target}${2:, ${0:sources}})",
    "description": "The \"Object.assign()\" method is used to copy the values of all enumerable own properties from one or more source objects to a target object. It will return the target object."
  },
  "ObjectCreate": {
    "prefix": "Oc",
    "body": "Object.create(${1:proto}${2:, {$0\\}})",
    "description": "The \"Object.create()\" method creates a new object, using an existing object as the prototype of the newly created object."
  },
  "ObjectDefineProperties": {
    "prefix": "Odps",
    "body": "Object.defineProperties(${1:obj}, {$0})",
    "description": "The \"Object.defineProperties()\" method creates a new object, using an existing object as the prototype of the newly created object."
  },
  "ObjectDefineProperty": {
    "prefix": "Odp",
    "body": "Object.defineProperty(${1:obj}, ${2:propertyKey}, {$0})",
    "description": "The static method \"Object.defineProperty()\" defines a new property directly on an object, or modifies an existing property on an object, and returns the object."
  },
  "ObjectEntries": {
    "prefix": "Oe",
    "body": "Object.entries(${0:obj})",
    "description": "The \"Object.entries()\" method returns an array of a given object's own enumerable string-keyed property [key, value] pairs, in the same order as that provided by a for...in loop (the difference being that a for-in loop enumerates properties in the prototype chain as well). The order of the array returned by Object.entries() does not depend on how an object is defined. If there is a need for certain ordering then the array should be sorted first like Object.entries(obj).sort((a, b) => b[0].localeCompare(a[0]));."
  },
  "ObjectFreeze": {
    "prefix": "Of",
    "body": "Object.freeze(${0:obj})",
    "description": "The \"Object.freeze()\" method freezes an object. A frozen object can no longer be changed; freezing an object prevents new properties from being added to it, existing properties from being removed, prevents changing the enumerability, configurability, or writability of existing properties, and prevents the values of existing properties from being changed. In addition, freezing an object also prevents its prototype from being changed. freeze() returns the same object that was passed in."
  },
  "ObjectFromEntries": {
    "prefix": "Ofe",
    "body": "Object.fromEntries(${0:entries})",
    "description": "The \"Object.fromEntries()\" method transforms a list of key-value pairs into an object."
  },
  "ObjectGetOwnPropertyDescriptor": {
    "prefix": "Ogopd",
    "body": "Object.getOwnPropertyDescriptor(${1:obj}, ${0:propertyKey})",
    "description": "The \"Object.getOwnPropertyDescriptor()\" method returns a property descriptor for an own property (that is, one directly present on an object and not in the object's prototype chain) of a given object."
  },
  "ObjectGetOwnPropertyDescriptors": {
    "prefix": "Ogopds",
    "body": "Object.getOwnPropertyDescriptor(${0:obj})",
    "description": "The \"Object.getOwnPropertyDescriptors()\" method returns all own property descriptors of a given object."
  },
  "ObjectGetOwnPropertySymbols": {
    "prefix": "Ogops",
    "body": "Object.getOwnPropertySymbols(${0:obj})",
    "description": "The \"Object.getOwnPropertySymbols()\" method returns an array of all symbol properties found directly upon a given object."
  },
  "ObjectGetPrototypeOf": {
    "prefix": "Ogpo",
    "body": "Object.getPrototypeOf(${0:obj})",
    "description": "The \"Object.getPrototypeOf()\" method returns the prototype (i.e. the value of the internal [[Prototype]] property) of the specified object."
  },
  "ObjectIs": {
    "prefix": "Oi",
    "body": "Object.is(${1:value1}, ${0:value2})",
    "description": "The \"Object.is()\" method determines whether two values are the same value."
  },
  "ObjectIsExtensible": {
    "prefix": "Oie",
    "body": "Object.isExtensible(${0:obj})",
    "description": "The \"Object.isExtensible()\" method determines if an object is extensible (whether it can have new properties added to it)."
  },
  "ObjectIsFrozen": {
    "prefix": "Oif",
    "body": "Object.isFrozen(${0:obj})",
    "description": "The \"Object.isFrozen()\" determines if an object is frozen."
  },
  "ObjectIsSealed": {
    "prefix": "Ois",
    "body": "Object.isSealed(${0:obj})",
    "description": "The \"Object.isSealed()\" method determines if an object is sealed."
  },
  "ObjectKeys": {
    "prefix": "Ok",
    "body": "Object.keys(${0:obj})",
    "description": "The \"Object.keys()\" method returns an array of a given object's own property names, in the same order as we get with a normal loop."
  },
  "ObjectPreventExtensions": {
    "prefix": "Ope",
    "body": "Object.preventExtensions(${0:obj})",
    "description": "The \"Object.preventExtensions()\" method prevents new properties from ever being added to an object (i.e. prevents future extensions to the object)."
  },
  "ObjectHasOwnProperty": {
    "prefix": ".hasOwnProperty",
    "body": ".hasOwnProperty(${0:propertyKey})",
    "description": "The \"hasOwnProperty()\" method returns a boolean indicating whether the object has the specified property as its own property (as opposed to inheriting it)."
  },
  "ObjectIsPrototypeOf": {
    "prefix": ".isPrototypeOf",
    "body": ".isPrototypeOf(${0:obj})",
    "description": "The \"isPrototypeOf()\" method checks if an object exists in another object's prototype chain."
  },
  "ObjectPropertyIsEnumerable": {
    "prefix": ".propertyIsEnumerable",
    "body": ".propertyIsEnumerable(${0:propertyKey})",
    "description": "The \"propertyIsEnumerable()\" method returns a Boolean indicating whether the specified property is enumerable."
  },
  "ObjectSeal": {
    "prefix": "Os",
    "body": "Object.seal(${0:obj})",
    "description": "The \"Object.seal()\" method seals an object, preventing new properties from being added to it and marking all existing properties as non-configurable. Values of present properties can still be changed as long as they are writable."
  },
  "ObjectValues": {
    "prefix": "Ov",
    "body": "Object.values(${0:obj})",
    "description": "The \"Object.setPrototypeOf()\" method returns an array of a given object's own enumerable property values, in the same order as that provided by a \"for...in\" loop (the difference being that a for-in loop enumerates properties in the prototype chain as well)."
  },
  "StringFromCharCode": {
    "prefix": "Sfcc",
    "body": "String.fromCharCode(${0:codes})",
    "description": "The static \"String.fromCharCode()\" method returns a string created from the specified sequence of UTF-16 code units."
  },
  "StringFromCodePoint": {
    "prefix": "Sfcp",
    "body": "String.fromCodePoint(${0:codePoints})",
    "description": "The static \"String.fromCodePoint()\" method returns a string created by using the specified sequence of code points."
  },
  "StringCharAt": {
    "prefix": ".charAt",
    "body": ".charAt(${0:index})",
    "description": "The \"String\" object's \"charAt()\" method returns a new string consisting of the single UTF-16 code unit located at the specified offset into the string."
  },
  "StringCharCodeAt": {
    "prefix": ".charCodeAt",
    "body": ".charCodeAt(${0:index})",
    "description": "The \"charCodeAt()\" method returns an integer between 0 and 65535 representing the UTF-16 code unit at the given index."
  },
  "StringCodePointAt": {
    "prefix": ".codePointAt",
    "body": ".codePointAt(${0:index})",
    "description": "The \"codePointAt()\" method returns a non-negative integer that is the Unicode code point value."
  },
  "StringEndsWith": {
    "prefix": ".endsWith",
    "body": ".endsWith(${1:searchString}${2:, ${0:endPosition}})",
    "description": "The \"endsWith()\" method determines whether a string ends with the characters of a specified string, returning \"true\" or \"false\" as appropriate."
  },
  "StringLocaleCompare": {
    "prefix": ".localeCompare",
    "body": ".localeCompare(${1:compareString}${2:, ${3:locales}${4:, {$0\\}}})",
    "description": "The \"localeCompare()\" method returns a number indicating whether a reference string comes before or after or is the same as the given string in sort order."
  },
  "StringMatch": {
    "prefix": ".match",
    "body": ".match(${0:regexp})",
    "description": "The \"match()\" method retrieves the result of matching a string against a regular expression."
  },
  "StringMatchAll": {
    "prefix": ".matchAll",
    "body": ".matchAll(${0:regexp})",
    "description": "The \"matchAll()\" method returns an iterator of all results matching a string against a regular expression, including capturing groups."
  },
  "StringNormalize": {
    "prefix": ".normalize",
    "body": ".normalize(${0:form})",
    "description": "The \"normalize()\" method returns the Unicode Normalization Form of a given string (if the value isn't a string, it will be converted to one first)."
  },
  "StringPadEnd": {
    "prefix": ".padEnd",
    "body": ".padEnd(${1:maxLength}${2:, ${0:fillString}})",
    "description": "The \"padEnd()\" method pads the current string with a given string (repeated, if needed) so that the resulting string reaches a given length. The padding is applied from the end of the current string."
  },
  "StringPadStart": {
    "prefix": ".padStart",
    "body": ".padStart(${1:maxLength}${2:, ${0:fillString}})",
    "description": "The \"padStart()\" method pads the current string with another string (multiple times, if needed) until the resulting string reaches the given length. The padding is applied from the start of the current string."
  },
  "StringRepeat": {
    "prefix": ".repeat",
    "body": ".repeat(${0:count})",
    "description": "The \"repeat()\" method constructs and returns a new string which contains the specified number of copies of the string on which it was called, concatenated together."
  },
  "StringReplace": {
    "prefix": ".replace",
    "body": ".replace(${1:subStringOrRegexp}, ${0:newSubstringOrReplacer})",
    "description": "The \"replace()\" method returns a new string with some or all matches of a pattern replaced by a replacement. The pattern can be a string or a RegExp, and the replacement can be a string or a function to be called for each match. If pattern is a string, only the first occurrence will be replaced."
  },
  "StringSearch": {
    "prefix": ".search",
    "body": ".search(${1:searcher})",
    "description": "The \"search()\" method executes a search for a match between a regular expression and this String object."
  },
  "StringSplit": {
    "prefix": ".split",
    "body": ".split(${1:splitter}${2:, ${0:limit}})",
    "description": "The \"split()\" method splits a String object into an array of strings by separating the string into substrings, using a specified separator string to determine where to make each split."
  },
  "StringStartsWith": {
    "prefix": ".startsWith",
    "body": ".startsWith(${1:searchString}${2:, ${0:position}})",
    "description": "The \"startsWith()\" method determines whether a string begins with the characters of a specified string, returning true or false as appropriate."
  },
  "StringSubstring": {
    "prefix": ".substring",
    "body": ".substring(${1:${2:start}${3:, ${0:end}}})",
    "description": "The \"substring()\" method returns the part of the string between the start and end indexes, or to the end of the string."
  },
  "StringToLocaleLowerCase": {
    "prefix": ".toLocaleLowerCase",
    "body": ".toLocaleLowerCase()",
    "description": "The \"toLocaleLowerCase()\" method returns the calling string value converted to lower case, according to any locale-specific case mappings."
  },
  "StringToLocaleUpperCase": {
    "prefix": ".toLocaleUpperCase",
    "body": ".toLocaleUpperCase()",
    "description": "The \"toLocaleUpperCase()\" method returns the calling string value converted to upper case, according to any locale-specific case mappings."
  },
  "StringToLowerCase": {
    "prefix": ".toLowerCase",
    "body": ".toLowerCase()",
    "description": "The \"toLowerCase()\" method returns the calling string value converted to lower case."
  },
  "StringToUpperCase": {
    "prefix": ".toUpperCase",
    "body": ".toUpperCase()",
    "description": "The \"toUpperCase()\" method returns the calling string value converted to uppercase (the value will be converted to a string if it isn't one)."
  },
  "StringTrim": {
    "prefix": ".trim",
    "body": ".trim()",
    "description": "The \"trim()\" method removes whitespace from both ends of a string. Whitespace in this context is all the whitespace characters (space, tab, no-break space, etc.) and all the line terminator characters (LF, CR, etc.)."
  },
  "StringTrimEnd": {
    "prefix": ".trimEnd",
    "body": ".trimEnd()",
    "description": "The \"trimEnd()\" method removes whitespace from the end of a string. trimRight() is an alias of this method."
  },
  "StringTrimStart": {
    "prefix": ".trimStart",
    "body": ".trimStart()",
    "description": "The \"trimStart()\" method removes whitespace from the beginning of a string. trimLeft() is an alias of this method."
  },
  "StringRaw": {
    "prefix": "Sr",
    "body": "String.raw${1:(${2:callSite}, ${0:substitutions})}",
    "description": "The \"trimStart()\" method removes whitespace from the beginning of a string. trimLeft() is an alias of this method."
  },
  "NumberIsFinite": {
    "prefix": "Nif",
    "body": "Number.isFinite(${0:number})",
    "description": "The \"Number.isFinite()\" method determines whether the passed value is a finite number."
  },
  "NumberIsInteger": {
    "prefix": "Nii",
    "body": "Number.isInteger(${0:number})",
    "description": "The \"Number.isInteger()\" method determines whether the passed value is an integer."
  },
  "NumberIsNaN": {
    "prefix": "Nin",
    "body": "Number.isNaN(${0:number})",
    "description": "The \"Number.isNaN()\" method determines whether the passed value is NaN and its type is Number. It is a more robust version of the original, global isNaN()."
  },
  "NumberIsSafeInteger": {
    "prefix": "Nisi",
    "body": "Number.isSafeInteger(${0:number})",
    "description": "The \"Number.isSafeInteger()\" method determines whether the provided value is a number that is a safe integer."
  },
  "NumberParseFloat": {
    "prefix": "Npf",
    "body": "Number.parseFloat(${0:string})",
    "description": "The \"Number.parseFloat()\" method parses a string argument and returns a floating point number."
  },
  "NumberParseInt": {
    "prefix": "Npi",
    "body": "Number.parseInt(${1:string}${2:, ${0:radix}})",
    "description": "The \"Number.parseInt()\" method parses a string argument and returns an integer of the specified radix or base."
  },
  "NumberToExponential": {
    "prefix": ".toExponential",
    "body": ".toExponential(${0:fractionDigits})",
    "description": "The \"toExponential()\" method returns a string representing the Number object in exponential notation."
  },
  "NumberToFixed": {
    "prefix": ".toFixed",
    "body": ".toFixed(${0:fractionDigits})",
    "description": "The \"toFixed()\" method formats a number using fixed-point notation."
  },
  "NumberToLocaleString": {
    "prefix": ".toLocaleString",
    "body": ".toLocaleString(${1:${2:locales}${3:, {$0\\}}})",
    "description": "The \"toLocaleString()\" method returns a string with a language-sensitive representation of this number."
  },
  "NumberToPrecision": {
    "prefix": ".toPrecision",
    "body": ".toPrecision(${0:precision})",
    "description": "The \"toPrecision()\" method formats a number using fixed-point notation."
  },
  "NumberToString": {
    "prefix": ".toString",
    "body": ".toString(${0:radix})",
    "description": "The \"toString()\" method returns a string representing the specified Number object."
  }
}
