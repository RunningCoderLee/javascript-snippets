{
  "ConsoleAssert": {
    "prefix": "ca",
    "body": "console.assert(${1:condition}, ${2:message})",
    "description": "Writes an error message to the console if the assertion is false. If the assertion is true, nothing happens."
  },
  "ConsoleClear": {
    "prefix": "ccl",
    "body": "console.clear()",
    "description": "Clears the console."
  },
  "ConsoleCount": {
    "prefix": "cc",
    "body": "console.count(${1:label})",
    "description": "Logs the number of times that this particular call to count() has been called. This function takes an optional argument label."
  },
  "ConsoleCountReset": {
    "prefix": "ccr",
    "body": "console.countReset(${1:label})",
    "description": "Resets the counter. This function takes an optional argument label."
  },
  "ConsoleDebug": {
    "prefix": "cdb",
    "body": "console.debug(${1:message})",
    "description": "The Console method debug() outputs a message to the web console at the \"debug\" log level. The message is only displayed to the user if the console is configured to display debug output."
  },
  "ConsoleDir": {
    "prefix": "cd",
    "body": "console.dir(${1:value})",
    "description": "The Console method dir() displays an interactive list of the properties of the specified JavaScript object. The output is presented as a hierarchical listing with disclosure triangles that let you see the contents of child objects."
  },
  "ConsoleDirXML": {
    "prefix": "cdx",
    "body": "console.dirxml(${1:object})",
    "description": "Displays an interactive tree of the descendant elements of the specified XML/HTML element. If it is not possible to display as an element the JavaScript Object view is shown instead. The output is presented as a hierarchical listing of expandable nodes that let you see the contents of child nodes."
  },
  "ConsoleError": {
    "prefix": "ce",
    "body": "console.error(${1:message})",
    "description": "Outputs an error message to the Web Console."
  },
  "ConsoleGroup": {
    "prefix": "cg",
    "body": "console.group(${1:groupTitle})",
    "description": "Creates a new inline group in the Web Console log. This indents following console messages by an additional level, until console.groupEnd() is called."
  },
  "ConsoleGroupCollapsed": {
    "prefix": "cgc",
    "body": "console.groupCollapsed(${1:groupTitle})",
    "description": "Creates a new inline group in the Web Console. Unlike console.group(), however, the new group is created collapsed. The user will need to use the disclosure button next to it to expand it, revealing the entries created in the group."
  },
  "ConsoleGroupEnd": {
    "prefix": "cge",
    "body": "console.groupEnd()",
    "description": "Exits the current inline group in the Web Console. See Using groups in the console in the console documentation for details and examples."
  },
  "ConsoleInfo": {
    "prefix": "ci",
    "body": "console.info(${1:message})",
    "description": "Outputs an informational message to the Web Console. In Firefox and Chrome, a small \"i\" icon is displayed next to these items in the Web Console's log."
  },
  "ConsoleLog": {
    "prefix": "cl",
    "body": "console.log(${1:message})",
    "description": "The Console method log() outputs a message to the web console. The message may be a single string (with optional substitution values), or it may be any one or more JavaScript objects."
  },
  "ConsoleTable": {
    "prefix": "ctb",
    "body": "console.table(${1:tabularData})",
    "description": "Displays tabular data as a table."
  },
  "ConsoleTime": {
    "prefix": "ct",
    "body": "console.time(${1:label})",
    "description": "Starts a timer you can use to track how long an operation takes. You give each timer a unique name, and may have up to 10,000 timers running on a given page. When you call console.timeEnd() with the same name, the browser will output the time, in milliseconds, that elapsed since the timer was started."
  },
  "ConsoleTimeEnd": {
    "prefix": "cte",
    "body": "console.timeEnd(${1:label})",
    "description": "Stops a timer that was previously started by calling \"console.time()\"."
  },
  "ConsoleTrace": {
    "prefix": "ctr",
    "body": "console.trace(${1:message})",
    "description": "The console interface's trace() method outputs a stack trace to the Web Console."
  },
  "ConsoleWarn": {
    "prefix": "cw",
    "body": "console.warn(${1:message})",
    "description": "Outputs a warning message to the Web Console."
  },
  "ArrayFrom": {
    "prefix": "Af",
    "body": "Array.from(${1:arrayLike}${2:, ${0:mapFn}})",
    "description": "The \"Array.from()\" method creates a new, shallow-copied Array instance from an array-like or iterable object."
  },
  "ArrayIsArray": {
    "prefix": "Aia",
    "body": "Array.isArray(${1:value})",
    "description": "The \"Array.isArray()\" method determines whether the passed value is an Array."
  },
  "ArrayOf": {
    "prefix": "Ao",
    "body": "Array.of(${1:items})",
    "description": "The \"Array.of()\" method creates a new Array instance from a variable number of arguments, regardless of number or type of the arguments."
  },
  "ArrayConcat": {
    "prefix": ".concat",
    "body": ".concat(${1:items})",
    "description": "The \"concat()\" method s used to merge two or more arrays. This method does not change the existing arrays, but instead returns a new array."
  },
  "ArrayCopyWithin": {
    "prefix": ".copyWithin",
    "body": ".copyWithin(${1:target}${2:, ${3:start}${4:, ${5:end}}})",
    "description": "The \"copyWithin()\" method shallow copies part of an array to another location in the same array and returns it without modifying its length."
  },
  "ArrayEntries": {
    "prefix": ".entries",
    "body": ".entries()",
    "description": "The \"entries()\" method returns a new Array Iterator object that contains the key/value pairs for each index in the array."
  },
  "ArrayEvery": {
    "prefix": ".every",
    "body": ".every(${1:(${2:value}${3:, ${4:index}${5:, ${6:array}}}) => {$0\\}})",
    "description": "The \"every()\" method tests whether all elements in the array pass the test implemented by the provided function. It returns a Boolean value."
  },
  "ArrayFill": {
    "prefix": ".fill",
    "body": ".fill(${1:target}${2:, ${3:start}${4:, ${5:end}}})",
    "description": "The \"fill()\" method fills (modifies) all the elements of an array from a start index (default zero) to an end index (default array length) with a static value. It returns the modified array."
  },
  "ArrayFilter": {
    "prefix": ".filter",
    "body": ".filter(${1:(${2:value}${3:, ${4:index}${5:, ${6:array}}}) => {$0\\}})",
    "description": "The \"filter()\" method creates a new array with all elements that pass the test implemented by the provided function."
  },
  "ArrayFind": {
    "prefix": ".find",
    "body": ".find(${1:(${2:value}${3:, ${4:index}${5:, ${6:array}}}) => {$0\\}})",
    "description": "The \"find()\" method returns the value of the first element in the array that satisfies the provided testing function. Otherwise \"undefined\" is returned."
  },
  "ArrayFindIndex": {
    "prefix": ".findIndex",
    "body": ".findIndex(${1:(${2:value}${3:, ${4:index}${5:, ${6:array}}}) => {$0\\}})",
    "description": "The \"findIndex()\" method returns the index of the first element in the array that satisfies the provided testing function. Otherwise, it returns -1, indicating that no element passed the test."
  },
  "ArrayFlat": {
    "prefix": ".flat",
    "body": ".flat(${1:depth})",
    "description": "The \"flat()\" method creates a new array with all sub-array elements concatenated into it recursively up to the specified depth."
  },
  "ArrayFlatMap": {
    "prefix": ".flatMap",
    "body": ".flatMap(${1:(${2:value}${3:, ${4:index}${5:, ${6:array}}}) => {$0\\}})",
    "description": "The \"flatMap()\" method first maps each element using a mapping function, then flattens the result into a new array. It is identical to a map() followed by a flat() of depth 1, but flatMap() is often quite useful, as merging both into one method is slightly more efficient."
  },
  "ArrayForEach": {
    "prefix": ".forEach",
    "body": ".forEach(${1:(${2:value}${3:, ${4:index}${5:, ${6:array}}}) => {$0\\}})",
    "description": "The \"forEach()\" method executes a provided function once for each array element."
  },
  "ArrayIncludes": {
    "prefix": ".includes",
    "body": ".includes(${3:searchElement}${1:, ${2:fromIndex}})",
    "description": "The \"includes()\" method determines whether an array includes a certain value among its entries, returning true or false as appropriate."
  },
  "ArrayIndexOf": {
    "prefix": ".indexOf",
    "body": ".indexOf(${3:searchElement}${1:, ${2:fromIndex}})",
    "description": "The \"indexOf()\" method returns the first index at which a given element can be found in the array, or -1 if it is not present."
  },
  "ArrayJoin": {
    "prefix": ".join",
    "body": ".join(${1:separator})",
    "description": "The \"join()\" method creates and returns a new string by concatenating all of the elements in an array (or an array-like object), separated by commas or a specified separator string. If the array has only one item, then that item will be returned without using the separator."
  },
  "ArrayKeys": {
    "prefix": ".keys",
    "body": ".keys()",
    "description": "The \"keys()\" method returns a new Array Iterator object that contains the keys for each index in the array."
  },
  "ArrayLastIndexOf": {
    "prefix": ".lastIndexOf",
    "body": ".lastIndexOf(${3:searchElement}${1:, ${2:fromIndex}})",
    "description": "The \"lastIndexOf()\" method returns the last index at which a given element can be found in the array, or -1 if it is not present. The array is searched backwards, starting at fromIndex."
  },
  "ArrayMap": {
    "prefix": ".map",
    "body": ".map(${1:(${2:value}${3:, ${4:index}${5:, ${6:array}}}) => {$0\\}})",
    "description": "The \"map()\" method creates a new array with the results of calling a provided function on every element in the calling array."
  },
  "ArrayPop": {
    "prefix": ".pop",
    "body": ".pop()",
    "description": "The \"pop()\" method removes the last element from an array and returns that element. This method changes the length of the array."
  },
  "ArrayPush": {
    "prefix": ".push",
    "body": ".push(${1:value})",
    "description": "The \"push()\" method removes the last element from an array and returns that element. This method changes the length of the array."
  },
  "ArrayReduce": {
    "prefix": ".reduce",
    "body": ".reduce(${3:(${4:previousValue}${5:, ${6:currentValue}${7:, ${8:currentIndex}${9:, ${10:array}}}}) => {$0\\}}${1:, ${2:initialValue}})",
    "description": "The \"reduce()\" method executes a reducer function (that you provide) on each element of the array, resulting in a single output value."
  },
  "ArrayReduceRight": {
    "prefix": ".reduceRight",
    "body": ".reduceRight(${3:(${4:previousValue}${5:, ${6:currentValue}${7:, ${8:currentIndex}${9:, ${10:array}}}}) => {$0\\}}${1:, ${2:initialValue}})",
    "description": "The \"reduceRight()\" method applies a function against an accumulator and each value of the array (from right-to-left) to reduce it to a single value."
  },
  "ArrayReverse": {
    "prefix": ".reverse",
    "body": ".reverse()",
    "description": "The \"reverse()\" method reverses an array in place. The first array element becomes the last, and the last array element becomes the first."
  },
  "ArraySlice": {
    "prefix": ".slice",
    "body": ".slice(${1:${2:start}${3:, ${4:end}}})",
    "description": "The \"slice()\" method returns a shallow copy of a portion of an array into a new array object selected from begin to end (end not included) where begin and end represent the index of items in that array. The original array will not be modified."
  },
  "ArraySome": {
    "prefix": ".some",
    "body": ".some(${1:(${2:value}${3:, ${4:index}${5:, ${6:array}}}) => {$0\\}})",
    "description": "The \"some()\" method tests whether at least one element in the array passes the test implemented by the provided function. It returns a Boolean value."
  },
  "ArraySort": {
    "prefix": ".sort",
    "body": ".sort(${1:(${2:a}, ${3:b}) => {$0\\}})",
    "description": "The \"sort()\" method sorts the elements of an array in place and returns the sorted array. The default sort order is built upon converting the elements into strings, then comparing their sequences of UTF-16 code units values."
  },
  "ArrayUnshift": {
    "prefix": ".unshift",
    "body": ".unshift(${0:value})",
    "description": "The \"unshift()\" method adds one or more elements to the beginning of an array and returns the new length of the array."
  },
  "ArrayValues": {
    "prefix": ".values",
    "body": ".values()",
    "description": "The \"values()\" method returns a new Array Iterator object that contains the values for each index in the array."
  },
  "ObjectAssign": {
    "prefix": "Oa",
    "body": "Object.assign(${1:target}${2:, ${0:sources}})",
    "description": "The \"Object.assign()\" method is used to copy the values of all enumerable own properties from one or more source objects to a target object. It will return the target object."
  },
  "ObjectCreate": {
    "prefix": "Oc",
    "body": "Object.create(${1:proto}${2:, {$0\\}})",
    "description": "The \"Object.create()\" method creates a new object, using an existing object as the prototype of the newly created object."
  },
  "ObjectDefineProperties": {
    "prefix": "Odps",
    "body": "Object.defineProperties(${1:obj}, {$0})",
    "description": "The \"Object.defineProperties()\" method creates a new object, using an existing object as the prototype of the newly created object."
  },
  "ObjectDefineProperty": {
    "prefix": "Odp",
    "body": "Object.defineProperty(${1:obj}, ${2:propertyKey}, {$0})",
    "description": "The static method \"Object.defineProperty()\" defines a new property directly on an object, or modifies an existing property on an object, and returns the object."
  },
  "ObjectEntries": {
    "prefix": "Oe",
    "body": "Object.entries(${0:obj})",
    "description": "The \"Object.entries()\" method returns an array of a given object's own enumerable string-keyed property [key, value] pairs, in the same order as that provided by a for...in loop (the difference being that a for-in loop enumerates properties in the prototype chain as well). The order of the array returned by Object.entries() does not depend on how an object is defined. If there is a need for certain ordering then the array should be sorted first like Object.entries(obj).sort((a, b) => b[0].localeCompare(a[0]));."
  },
  "ObjectFreeze": {
    "prefix": "Of",
    "body": "Object.freeze(${0:obj})",
    "description": "The \"Object.freeze()\" method freezes an object. A frozen object can no longer be changed; freezing an object prevents new properties from being added to it, existing properties from being removed, prevents changing the enumerability, configurability, or writability of existing properties, and prevents the values of existing properties from being changed. In addition, freezing an object also prevents its prototype from being changed. freeze() returns the same object that was passed in."
  },
  "ObjectFromEntries": {
    "prefix": "Ofe",
    "body": "Object.fromEntries(${0:entries})",
    "description": "The \"Object.fromEntries()\" method transforms a list of key-value pairs into an object."
  },
  "ObjectGetOwnPropertyDescriptor": {
    "prefix": "Ogopd",
    "body": "Object.getOwnPropertyDescriptor(${1:obj}, ${0:propertyKey})",
    "description": "The \"Object.getOwnPropertyDescriptor()\" method returns a property descriptor for an own property (that is, one directly present on an object and not in the object's prototype chain) of a given object."
  },
  "ObjectGetOwnPropertyDescriptors": {
    "prefix": "Ogopds",
    "body": "Object.getOwnPropertyDescriptor(${0:obj})",
    "description": "The \"Object.getOwnPropertyDescriptors()\" method returns all own property descriptors of a given object."
  },
  "ObjectGetOwnPropertySymbols": {
    "prefix": "Ogops",
    "body": "Object.getOwnPropertySymbols(${0:obj})",
    "description": "The \"Object.getOwnPropertySymbols()\" method returns an array of all symbol properties found directly upon a given object."
  },
  "ObjectGetPrototypeOf": {
    "prefix": "Ogpo",
    "body": "Object.getPrototypeOf(${0:obj})",
    "description": "The \"Object.getPrototypeOf()\" method returns the prototype (i.e. the value of the internal [[Prototype]] property) of the specified object."
  },
  "ObjectIs": {
    "prefix": "Oi",
    "body": "Object.is(${1:value1}, ${0:value2})",
    "description": "The \"Object.is()\" method determines whether two values are the same value."
  },
  "ObjectIsExtensible": {
    "prefix": "Oie",
    "body": "Object.isExtensible(${0:obj})",
    "description": "The \"Object.isExtensible()\" method determines if an object is extensible (whether it can have new properties added to it)."
  },
  "ObjectIsFrozen": {
    "prefix": "Oif",
    "body": "Object.isFrozen(${0:obj})",
    "description": "The \"Object.isFrozen()\" determines if an object is frozen."
  },
  "ObjectIsSealed": {
    "prefix": "Ois",
    "body": "Object.isSealed(${0:obj})",
    "description": "The \"Object.isSealed()\" method determines if an object is sealed."
  },
  "ObjectKeys": {
    "prefix": "Ok",
    "body": "Object.keys(${0:obj})",
    "description": "The \"Object.keys()\" method returns an array of a given object's own property names, in the same order as we get with a normal loop."
  },
  "ObjectPreventExtensions": {
    "prefix": "Ope",
    "body": "Object.preventExtensions(${0:obj})",
    "description": "The \"Object.preventExtensions()\" method prevents new properties from ever being added to an object (i.e. prevents future extensions to the object)."
  },
  "ObjectHasOwnProperty": {
    "prefix": ".hasOwnProperty",
    "body": ".hasOwnProperty(${0:propertyKey})",
    "description": "The \"hasOwnProperty()\" method returns a boolean indicating whether the object has the specified property as its own property (as opposed to inheriting it)."
  },
  "ObjectIsPrototypeOf": {
    "prefix": ".isPrototypeOf",
    "body": ".isPrototypeOf(${0:obj})",
    "description": "The \"isPrototypeOf()\" method checks if an object exists in another object's prototype chain."
  },
  "ObjectPropertyIsEnumerable": {
    "prefix": ".propertyIsEnumerable",
    "body": ".propertyIsEnumerable(${0:propertyKey})",
    "description": "The \"propertyIsEnumerable()\" method returns a Boolean indicating whether the specified property is enumerable."
  },
  "ObjectValueOf": {
    "prefix": ".valueOf",
    "body": ".valueOf()",
    "description": "The \"propertyIsEnumerable()\" method returns the primitive value of the specified object."
  },
  "ObjectSeal": {
    "prefix": "Os",
    "body": "Object.seal(${0:obj})",
    "description": "The \"Object.seal()\" method seals an object, preventing new properties from being added to it and marking all existing properties as non-configurable. Values of present properties can still be changed as long as they are writable."
  },
  "ObjectValues": {
    "prefix": "Ov",
    "body": "Object.values(${0:obj})",
    "description": "The \"Object.setPrototypeOf()\" method returns an array of a given object's own enumerable property values, in the same order as that provided by a \"for...in\" loop (the difference being that a for-in loop enumerates properties in the prototype chain as well)."
  }
}
